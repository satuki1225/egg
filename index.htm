<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <!-- ピンチズームはOK、ダブルタップズームだけ防止 -->
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">
  <title>イースタータイムアタック</title>
  <style>
    /* ページ全体のタッチ動作調整 */
    html, body, #gameArea {
      margin: 0;
      padding: 0;
      touch-action: manipulation;       /* ピンチやパンは許可、ダブルタップズーム無効 */
      overscroll-behavior: none;        /* スクロールバウンス無効 */
    }
    body {
      font-family: sans-serif;
      text-align: center;
      background: #fdf6e3;
      padding: 20px;
    }
    #gameArea {
      position: relative;
      width: 90%;
      max-width: 400px;
      height: 500px;
      margin: 0 auto;
      border: 3px solid #ccc;
      background-image: url("grass.png");
      background-size: cover;
      background-position: center;
      overflow: hidden;
      border-radius: 10px;
    }
    .egg-img {
      position: absolute;
      width: 60px;
      height: 60px;
      cursor: pointer;
      user-select: none;
      transition: transform 0.1s;
      touch-action: manipulation;
    }
    .egg-img:active {
      transform: scale(1.3);
    }
    #score {
      font-size: 24px;
      margin: 10px;
    }
    #startBtn {
      font-size: 20px;
      padding: 10px 20px;
      margin-top: 10px;
      touch-action: manipulation;
    }
    .note {
      font-size: 12px;
      color: #666;
      margin: 8px 0;
      line-height: 1.4;
    }
    @media (max-width: 480px) {
      .egg-img {
        width: 50px;
        height: 50px;
      }
      .note {
        font-size: 11px;
      }
    }
  </style>
</head>
<body>

  <h1>イースタータイムアタック🥚</h1>
  <p class="note">
    赤い卵をゲットしよう<br>
    青いのはカップケーキだよ<br>
    ※音が鳴ります
  </p>

  <div id="score">スコア：0</div>
  <button id="startBtn">ゲームスタート！</button>
  <div id="gameArea"></div>

  <audio id="bgm" src="bgm.mp3" loop></audio>
  <audio id="se" src="se.mp3"></audio>

  <script>
    // ダブルタップによるズームを防止
    let lastTouchEnd = 0;
    document.addEventListener('touchend', function(e) {
      const now = Date.now();
      if (now - lastTouchEnd <= 300) {
        e.preventDefault();
      }
      lastTouchEnd = now;
    }, false);

    const gameArea    = document.getElementById("gameArea");
    const scoreDisplay = document.getElementById("score");
    const startBtn    = document.getElementById("startBtn");
    const bgm         = document.getElementById("bgm");
    const se          = document.getElementById("se");

    let score, elapsedTime, gameTimer, spawnLoop;
    const totalTime = 30; // 全体時間30秒

    function getRandomPosition() {
      return {
        x: Math.random() * (gameArea.clientWidth - 60),
        y: Math.random() * (gameArea.clientHeight - 60)
      };
    }

    function spawnEggs(count) {
      for (let i = 0; i < count; i++) {
        const img = document.createElement("img");
        img.className = "egg-img";

        const isBomb = Math.random() < 0.2;
        img.src = isBomb ? "bomb.png" : "egg.png";
        img.dataset.bomb = isBomb;

        const { x, y } = getRandomPosition();
        img.style.left = x + "px";
        img.style.top  = y + "px";

        img.addEventListener("click", () => {
          if (img.dataset.bomb === "true") {
            score--;
            scoreDisplay.textContent = `スコア：${score}`;
            img.src = "explosion.png";
          } else {
            score++;
            scoreDisplay.textContent = `スコア：${score}`;
            se.currentTime = 0;
            se.play();
            img.src = "bunny.png";
          }
          img.style.pointerEvents = "none";
          setTimeout(() => img.remove(), 300);
        });

        gameArea.appendChild(img);
        setTimeout(() => {
          if (gameArea.contains(img)) img.remove();
        }, 1000);
      }
    }

    function spawnController() {
      clearTimeout(spawnLoop);
      if (elapsedTime >= totalTime) return;

      let interval = 1000, count = 1;
      if (elapsedTime >= 20) {
        interval = 200;
        count = 2;
      } else if (elapsedTime >= 10) {
        interval = 500;
      }

      spawnEggs(count);
      spawnLoop = setTimeout(spawnController, interval);
    }

    function startGame() {
      score = 0;
      elapsedTime = 0;
      scoreDisplay.textContent = "スコア：0";
      startBtn.disabled = true;
      gameArea.innerHTML = "";
      bgm.play();

      spawnController();
      gameTimer = setInterval(() => {
        elapsedTime++;
        if (elapsedTime >= totalTime) {
          clearInterval(gameTimer);
          clearTimeout(spawnLoop);
          endGame();
        }
      }, 1000);
    }

    function endGame() {
      bgm.pause();
      bgm.currentTime = 0;
      startBtn.disabled = false;
      gameArea.innerHTML = "";

      let comment = "🐰うーん、もっとがんばろ？";
      if (score >= 30)   comment = "🐰伝説級のハンターじゃん！";
      else if (score >= 20) comment = "🐰おぉ～やるじゃないか！";
      else if (score >= 10) comment = "🐰まあまあだな！";
      else if (score >= 5)  comment = "🐰最初にしては悪くない！";

      alert(`ゲーム終了！\nスコア：${score}\n${comment}`);
    }

    startBtn.addEventListener("click", startGame);
  </script>

</body>
</html>
